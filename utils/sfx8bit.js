// utils/sfx8bit.js
// ============================================================
// üéÆ SPIRTUOZ 8-BIT SOUND FX LIBRARY
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç playTone() –∏–∑ audio.js v3
// ============================================================

import { playTone } from "./audio";

export const sfx = {
  // üì¶ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–ª–∏–∫ (UI)
  click() {
    playTone(700, { type: "square", duration: 0.07, volume: 0.25, pitchRandom: 5 });
  },

  // üí∞ –º–æ–Ω–µ—Ç–∫–∞ / –ø–æ–æ—â—Ä–µ–Ω–∏–µ
  coin() {
    const notes = [900, 1200, 1500];
    notes.forEach((f, i) =>
      setTimeout(() => playTone(f, { type: "square", duration: 0.06, volume: 0.25 }), i * 60)
    );
  },

  // ‚úÖ —É—Å–ø–µ—Ö / –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
  success() {
    const tones = [500, 700, 950];
    tones.forEach((t, i) =>
      setTimeout(() => playTone(t, { type: "triangle", duration: 0.1, volume: 0.25 }), i * 120)
    );
  },

  // ‚ùå –æ—à–∏–±–∫–∞ / –ø—Ä–æ–º–∞—Ö
  fail() {
    playTone(340, { type: "square", duration: 0.15, volume: 0.3 });
    setTimeout(() => playTone(210, { type: "square", duration: 0.25, volume: 0.25 }), 100);
  },

  // üèÅ —Å—Ç–∞—Ä—Ç —É—Ä–æ–≤–Ω—è
  start() {
    const tones = [400, 500, 600, 800];
    tones.forEach((t, i) =>
      setTimeout(() => playTone(t, { type: "square", duration: 0.08, volume: 0.25 }), i * 90)
    );
  },

  // üí• –≤–∑—Ä—ã–≤ / –ø—Ä–æ–∏–≥—Ä—ã—à
  explosion() {
    for (let i = 0; i < 10; i++) {
      const f = 900 - i * 60 + Math.random() * 100;
      setTimeout(() => {
        playTone(f, {
          type: "sawtooth",
          duration: 0.05 + Math.random() * 0.1,
          volume: 0.2,
          pitchRandom: 20,
        });
      }, i * 25);
    }
  },

  // ü™ú –ø—Ä—ã–∂–æ–∫
  jump() {
    playTone(600, { type: "square", duration: 0.08, volume: 0.2 });
    setTimeout(() => playTone(900, { type: "square", duration: 0.08, volume: 0.2 }), 70);
  },

  // üéâ –ø–æ–±–µ–¥–∞ / —Ñ–∏–Ω–∏—à
  win() {
    const melody = [400, 600, 800, 1000, 1200];
    melody.forEach((n, i) =>
      setTimeout(() => playTone(n, { type: "triangle", duration: 0.1, volume: 0.25 }), i * 100)
    );
  },

  // üåü –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
  spawn() {
    playTone(1200, { type: "square", duration: 0.05, volume: 0.2 });
    setTimeout(() => playTone(800, { type: "triangle", duration: 0.05, volume: 0.2 }), 70);
  },

  // üîî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  ding() {
    playTone(1000, { type: "triangle", duration: 0.15, tremolo: 5, volume: 0.25 });
  },

  // üí´ –ª—ë–≥–∫–∏–π –±–ª–∏–∫ / —à–∞–≥
  blip() {
    playTone(800, { type: "square", duration: 0.06, pitchRandom: 5, volume: 0.2 });
  },

  // üß© —Å–µ—Ä–∏—è / –∫–æ–º–±–æ ‚Äî –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—é
  combo(level = 1) {
    const baseFreq = 500;
    const count = Math.min(6, 2 + level);
    for (let i = 0; i < count; i++) {
      const f = baseFreq + i * 120 + Math.random() * 40;
      setTimeout(() => {
        playTone(f, {
          type: i % 2 ? "square" : "triangle",
          duration: 0.08,
          volume: 0.25,
          pitchRandom: 4,
        });
      }, i * 80);
    }
  },
};
